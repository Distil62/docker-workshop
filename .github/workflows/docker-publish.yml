name: Branch_7

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ 7 ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ 7 ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: distil62/docker-workshop

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: dotnet-sonarscanner
        # You may pin to the exact commit or the version.
        # uses: Secbyte/dotnet-sonarscanner@10230bbd60c5b727532504308cba3c6577deba14
        uses: Secbyte/dotnet-sonarscanner@v2.3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          # Command to invoke build
          buildCommand: dotnet build myApp
          # Specifies the key of the analyzed project in SonarQube
          projectKey: docker-workshop
          # Specifies the name of the analyzed project in SonarQube
          projectName: docker-workshop
          # The server URL
          sonarHostname: http://78.199.48.68:9000/
          # Organisation
          sonarOrganisation: Personne
          # Arguments to append to the begin command
#           beginArguments:
          # Arguments to append to the end command
#           endArguments: # optional

      # AJOUTEZ ICI les instructions pour ajouter SonarQube
      # 1- Mettez en place une instance de SonarQube ACCESSIBLE DEPUIS LA PIPELINE (exposé sur le web)
      # 2- Pour dotnet core 
      #     2.1 - Installez dotnet
      #     2.2 - Installez les dépendances
      #     2.3 - Faite un sonar begin (https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-msbuild/)
      #     2.4 - Construisez votre application
      #     2.5 - Faite un sonar end
      # 3- Faite passer à votre code le code quality gate (https://github.com/SonarSource/sonarqube-quality-gate-action )
      #     3.1 - Votre repport sera situé à myApp/.sonarqube/out/.sonar/report-task.txt

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: distil62
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
